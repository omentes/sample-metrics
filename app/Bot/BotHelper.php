<?php

declare(strict_types=1);

namespace SampleMetrics\Bot;

class BotHelper
{
    /**
     * @param int  $itemId
     * @param int  $price
     * @param bool $exist
     *
     * @return array
     */
    public static function getPagination(int $itemId, int $price, bool $exist): array
    {
        $result[] = BotHelper::getPaginationFw($itemId);
        $addRemove = $exist ?
            [
                'text' => "üö´ –£–¥–∞–ª–∏—Ç—å",
                'callback_data' => 'item_del_' . $itemId,
            ] :
            [
                'text' => "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                'callback_data' => 'item_add_' . $itemId,
            ];
        $result[] = [
            $addRemove,
        ];
        $result[] = [
            [
                'text' => "üí≤ " . $price / 100,
                'callback_data' => 'empty',
            ]
        ];
        $result[] = [
            [
                'text' => "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                'callback_data' => 'buy_' . $itemId,
            ]
        ];

        return $result;
    }

    /**
     * @param int $num
     *
     * @return \string[][]
     */
    private static function getPaginationFw(int $num): array
    {
        return [
            [
                'text' => $num > 1 ? '   ‚èÆ   ' : '        ',
                'callback_data' => $num > 2 ? 'product_' . 1 : 'empty',
            ],
            [
                'text' => $num > 1 ? '   ‚è™   ' : '        ',
                'callback_data' => $num > 1 ? 'product_' . ($num - 1) : 'empty',
            ],
            [
                'text' => BotHelper::createEmojiNumber($num),
                'callback_data' => 'product_' . $num,
            ],
            [
                'text' => $num < 10 ? '   ‚è©   ' : '        ',
                'callback_data' => $num < 10 ? 'product_' . ($num + 1) : 'empty',
            ],
            [
                'text' => $num < 10 ? '   ‚è≠   ' : '        ',
                'callback_data' => $num < 10 ? 'product_' . 10 : 'empty',
            ],
        ];
    }

    /**
     * @param int    $num
     * @param string $text
     *
     * @return string
     */
    private static function createEmojiNumber(int $num, string $text = ''): string
    {
        $tmp = $num;
        if ($tmp >= 10) {
            $text .= BotHelper::createEmojiNumber(intval($tmp / 10));
            $text .= BotHelper::createEmojiNumber(intval($tmp % 10));
        }
        if ($tmp < 10) {
            $text .= match($tmp) {
                0 => '0Ô∏è‚É£',
                1 => '1Ô∏è‚É£',
                2 => '2Ô∏è‚É£',
                3 => '3Ô∏è‚É£',
                4 => '4Ô∏è‚É£',
                5 => '5Ô∏è‚É£',
                6 => '6Ô∏è‚É£',
                7 => '7Ô∏è‚É£',
                8 => '8Ô∏è‚É£',
                9 => '9Ô∏è‚É£',
            };
        }

        return $text;
    }
}
